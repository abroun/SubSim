

- Draw 3D axes as a GUI element on screen - Drawn, but not as GUI

- Start work on the interface with Player
    - Get the simulation to load as a plug-in
    - Implement the simulation and position3d (or maybe position2d) interfaces

- Create a replacement debug camera class to give more control over the cameras initial position and also to let the camera be moved ithe the keyboard

Coordinate system
=================

The coordinate system in the simulator is right-handed (as opposed to Irrlicht which is left-handed)

The z-axis in the simulator points up so it is Irrlict's y-axis
The x-axis in the simulator points along Irrlicht's positive x-axis
The y-axis in the simulator points along Irrlicht's positive z-axis

So, in order to move from simulator space into Irrlict space we need to rotate -90 degrees around the x-axis and then reverse the y-axis.

To get back from Irrlicht space we need to reverse the process by flipping the y-axis and rotating 90 degrees around the x-axis

Done
====

- Work out the best way to export .x files from Blender - Done
- Tidy up and commit to git - Done
- Write the unit tests for the vector class - 11/11/09
- Write a left handed and right-handed cross product routine for the vector class. - 11/11/09
- Write some code to transform between the two co-ordinate systems (and unit test it) - 16/11/09
- Write some code for the Sub entity to let it be posistioned in the world using a right-hand coordinate system - 16/11/09
- Add a debug camera to look around the scene - 16/11/09
- Build up the rest of the world - 16/11/09
- Create Swimming pool, buoy and gate objects (quickly) - 16/11/09
- Try to add a blue fog to the world to approximate the visibility in the water - 16/11/09
